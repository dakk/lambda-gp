dopo aver predisposto il generatore per utilizzare il lambda calcolo non tipato, molto spesso
vengono generati delle funzioni non riducibili prive di significato; 

possiamo incrementare l'affidabilita' della generazione introducendo un lambda calcolo tipato;
partiamo da un sistema base con solo due tipi, uno per le funzioni ed un altro per un valore 
costante:

- t -> t
- unit

il typechecker e' molto semplice, ma ci consente di verificare che un programma:

- non faccia app su un symbolo che non rappresenta una funzione
- le funzioni ricevano il tipo corretto

qualche problema sorge quando cerchiamo di definire il fixed point dato che in \\x.(x x)
non esiste un tipo valido per x.

\\x:u->u.(x x)

per poter definire la ricorsione abbiamo due solo strade:
- introdurre un tipo ricorsivo
- introdurre un nuovo simbolo fix

scegliamo la strada del tipo, cosi' da non cambiare la semantica delle riduzioni ma solo del typecherer;
definiamo nuovo tipo TRecFun in modo che possiamo definire un tipo dove il risultato
e' il tipo stesso, come in quest caso

\\x:(rec u->u).(x x)

Abs("x", TRecFun(TUnit), App(Var "x", Var "x"));;

quindi x e' una funzione che riceve come parametro una funzione che ritorna una funzione dello stesso tipo.
((unit → ...) → (unit → ...))

sembra funzionare, e' solo un casino tipizzare le cose.

una volta fatto il tutto possiamo scrivere una grammatica generativa (potremmo usare lsystem)
per generare programmi validi tipizzati. per aggiungere casualita' usiamo la variante stocastica
(dove per ogni simbolo root possiamo avere piu' regole con diverse probabilita'); sicuramente
dovremmo oltre a questo anche integrare il context sensitive per usare solo variabili gia' nell'ambiente.

(potremmo scrivere un paper solo su questo volendo)

TODO: integrare il typechecker nel reducer?

continuare a fixare le funzioni esempio